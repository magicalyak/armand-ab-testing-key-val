#####################
# Virtual Server | 80
#####################

##
# localhost ab.example.com www.example.com www2.example.com ""
# A/B example website
##

######

# How it works:
# A client request comes for www.example.com and NGINX will use this configuration to do  Split Traffic, A/B testing:
# 1. For example, we set the split level to 5% for www.example.com to go to Version B by making a REST API Post to populate our key-value store to {"www.example.com": "5"}
# 2. When the client request comes for www.example.com, the variable, $host, is set to the incoming host header, www.example.com
# 3. The key-value lookup with the key ($host), www.example.com, is done and retrieves the corresponding value ($split_level), of 5 i.e. 5%
# 4. We then look at the `map $split_level $ab_split`, where $split_level = 5, and maps the value for the variable, $ab_split, to. In this case $split_level = 5, and so $ab_split is set to the value of $split5. The value of $split5 is set in the split_client blocks...
# 5. Now look to the series of split_clients blocks, here we will set the value of $split5, `split_clients $client_ip $split5`. split_clients takes in a string and uses a hashing algorithm called MurmurHash2 to split hash values to the defined percentages. In this example, we have set our string, $client_ip, in the `server` block below, `set $client_ip "app${request_id}${http_user_agent}${date_gmt}";` , this string is combination of unique request ID, user agent and timestamp. Based on the provided string, 5% of request with this string will set $split5 to `version_b` and remainder (*) to `version_a`. Let's say in this request, $split5 is set to `version_b`, this in turn also sets $ab_split to `version_b` (i.e the value of $split5) back in the map block
# 6. We have on more map block, `$cookie_split_test_version $upstream`, where we set the upstream ($upstream) to be proxied. This map will evaluate the value of $cookie_split_test_version and then set $upstream to the corresponding value. For a first time request, the cookie split_test_version is not set and therefore the variable, $cookie_split_test_version, is empty, and so for this request the map will set the default value, $ab_split, to $upstream. In this case $ab_split was set to `version_b`.
# 7a. Finally in the server block, we match the requested url to the appropriate location block, if the request path is /sticky,
# we look to the location block, /sticky, and we will proxy to http://$upstream (version_b) and also set a cookie, `split_test_version` with the value of $upstream (version_b). The Cookie will persist on the client for the defined time, 3600s, and so subsequent requests will pin the user to the upstream it first landed on (see step 6, where the map block sets $upstream)
# 7b. If the request path is /stickyroute, we look to the location block, /stickyroute, and we will proxy to http://stickyroute. In the config file, upstreams.conf, in the `upstream stickyroute` block, we use the `sticky route` directive to extract the value of the cookie, split_test_version, i.e. $cookie_split_test_version, to determine which route to path to. In the same upstream block, we have labeled the backend servers with route=version_a and route=version_b. Back to the location block, we also set a cookie, `split_test_version`, with the value of $upstream (version_b). The Cookie will persist on the client for the defined time, 3600s, and so subsequent requests will pin the user to the upstream it first landed on (see step 6, where the map block sets $upstream). Note: A request that comes from a client not yet bound to a particular server is passed to the server selected by the configured balancing method.
# 7c. If the request path is / or anything else not /sticky or /stickyroute, we look to the location block, /, and we will proxy to http://$upstream (verion_b). No cookie is set in this location block and so subsequent requests will not persist to the backend server it first landed on

# To determine the upstream to proxy, we set need to set the value of $upstream_group
map $cookie_split_test_version $upstream {
        default $ab_split;
        "version_a" "version_a";
        "version_b" "version_b";
    }

# key-value store
# Optional: use state=[file] , to persist across reloads and restarts
keyval_zone zone=split:64k state=/etc/nginx/state_files/split.json;
keyval      $host $split_level zone=split;

# Map - set the value of $ab_split (see split_client blocks sets this value)
map $split_level $ab_split {
    0        $split0;
    5        $split5;
    10       $split10;
    25       $split25;
    50       $split50;
    75       $split75;
    100      $split100;
    default  $split0;
}

# Split_client blocks will set $splitX to either version_a or version_b
# ($client_ip is set in the server block below)
split_clients $client_ip $split0 {
    *   version_a;
}
split_clients $client_ip $split5 {
    5%  version_b;
    *   version_a;
}
split_clients $client_ip $split10 {
    10% version_b;
    *   version_a;
}
split_clients $client_ip $split25 {
    25% version_b;
    *   version_a;
}
split_clients $client_ip $split50 {
    50% version_b;
    *   version_a;
}
split_clients $client_ip $split75 {
    75% version_b;
    *   version_a;
}
split_clients $client_ip $split100 {
    *   version_b;
}

# To determine the upstream to proxy, we set need to set the value of $upstream_group
map $cookie_split_test_version $upstream {
        default $ab_split;
        "version_a" "version_a";
        "version_b" "version_b";
    }

server {
    listen 80 default_server;
    status_zone ab.example.com_http;
    server_name localhost ab.example.com www.example.com www2.example.com "";

## A/B Testing of upstream groups
## A and B servers are grouped within seperate upstreams

    # Set Traffic Split key - How we want to base our Traffic split on
    #set $client_ip "app${remote_addr}${http_user_agent}${date_gmt}"; # Production
    set $client_ip "app${request_id}${http_user_agent}${date_gmt}";  # For testing only

    # This location will use split_clients to set $appversion and
    # to direct reqests to an upstream
    location / {
        proxy_pass http://$upstream;
    }

    # This location will add a client cookie that will pin a user to a upstream
    # using the a map to set $upstream_group
    location = /sticky {

       # Add cookie with the expiry of the duration of the AB test (1 hour)
       # this will be used pin the user to version_a and version_b for the duration of the cookies validity
       add_header Set-Cookie "split_test_version=$upstream;Path=/;Max-Age=3600;";

       proxy_pass http://$upstream;

    }

    ## A/B Testing of Server(s) within a upstream group
    ## A and B server(s) in the same upstream group are labeled Route "A" or "B".
    ## sticky route  and sticky route directives are used to split traffic and cookies are used for session persistence


    # This location will use the `sticky route` directive to pin user to a particular upstream node(s)
    # The directive takes a list of one or more parameters and sets the route to the value of the first nonempty parameter in the list
    # that will pin a user to a upstream
    location = /stickyroute {

       # Add cookie with the expiry of the duration of the AB test (1 hour)
       # this will be used pin the user to version_a and version_b for the duration of the cookies validity
       add_header Set-Cookie "split_test_version=$upstream;Path=/;Max-Age=3600;";

       # proxy stickyroute upstream, see upstreams.conf for sticky route settings
       proxy_pass http://stickyroute;

        }
}